{"ast":null,"code":"// - node-email Copyright Aaron Heckmann <aaron.heckmann+github@gmail.com> (MIT Licensed)\n\n/**\n * Module dependencies.\n */\nvar spawn = require('child_process').spawn;\n/**\n * Generates a boundry string.\n * @return {String}\n */\n\n\nvar boundryidx = 0;\n\nfunction genBoundry() {\n  return 'part_' + Date.now() + \"_\" + boundryidx++;\n}\n/**\n * Email : Sends email using the sendmail command.\n *\n * Note: sendmail must be installed: see http://www.sendmail.org/\n *\n * @param {Object} config - optional configuration object\n *    - to {array|string} Email address(es) to which this msg will be sent\n *    - from {string} Email address from which this msg is sent. If not set\n *      defaults to the `exports.from` global setting.\n *    - replyTo {string} Email address to which replies will be sent. If not\n *      set defaults to `from`\n *    - cc {array|string} Email address(es) who receive a copy\n *    - bcc {array|string} Email address(es) who receive a blind copy\n *    - subject {string} The subject of the email\n *    - body {string} The message of the email\n *    - bodyType {string} Content type of body. Only valid option is\n *      'html' (for now). Defaults to text/plain.\n *    - altText {string} If `bodyType` is set to 'html', this will be sent\n *      as the alternative text.\n *    - timeout {number} Duration in milliseconds to wait before killing the\n *      process. If not set, defaults to `exports.timeout` global setting.\n *    - path {string} Optional path to the sendmail executable.\n *\n * Global settings\n *    - exports.timeout {number} Duration in milliseconds to wait before\n *      killing the process. Defaults to 3000. Used when `timeout` is not set\n *      on a message.\n *    - exports.from {string} Email address from which messages are sent. Used\n *      when `from` was not set on a message.\n *\n * Example:\n *    var Email = require('path/to/email').Email\n *    var myMsg = new Email(\n *    { from: 'me@example.com'\n *    , to:   'you@example.com'\n *    , subject: 'Knock knock...'\n *    , body: \"Who's there?\"\n *    })\n *    myMsg.send(function(err){\n *      ...\n *    })\n */\n\n\nfunction Email(config) {\n  config = config || {};\n  ;\n  ['to', 'from', 'cc', 'bcc', 'replyTo', 'subject', 'body', 'bodyType', 'altText', 'timeout'].forEach(function (key) {\n    this[key] = config[key];\n  }, this);\n  this.path = config.path || \"sendmail\";\n}\n\nEmail.prototype = {\n  send: function (callback) {\n    if (!this.valid(callback)) return;\n    var sendmail = spawn(this.path, ['-i', '-t'], this.options);\n    sendmail.on('exit', function (code) {\n      var err = null;\n\n      if (code !== 0) {\n        err = new Error(\"Sendmail exited with code: \" + code);\n      }\n\n      if (callback) {\n        callback(err);\n      }\n    });\n    sendmail.stdin.end(this.msg);\n  },\n\n  get options() {\n    return {\n      timeout: this.timeout || exports.timeout\n    };\n  },\n\n  get msg() {\n    var msg = new Msg(),\n        boundry = genBoundry(),\n        to = formatAddress(this.to),\n        cc = formatAddress(this.cc),\n        bcc = formatAddress(this.bcc),\n        html = this.bodyType && 'html' === this.bodyType.toLowerCase(),\n        plaintext = !html ? this.body : this.altText ? this.altText : '';\n    msg.line('To: ' + to);\n    msg.line('From: ' + (this.from || exports.from));\n    msg.line('Reply-To: ' + (this.replyTo || this.from || exports.from));\n    msg.line('Subject: ' + this.subject);\n    if (cc) msg.line('CC: ' + cc);\n    if (bcc) msg.line('BCC: ' + bcc);\n    msg.line('Mime-Version: 1.0');\n    msg.line('Content-Type: multipart/alternative; boundary=' + boundry);\n    msg.line();\n\n    if (plaintext) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/plain; charset=utf-8');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(plaintext);\n      msg.line();\n    }\n\n    if (html) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/html; charset=utf-8');\n      msg.line('Content-Transfer-Encoding: Base64');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(this.encodedBody);\n      msg.line();\n    }\n\n    return msg.toString();\n  },\n\n  get encodedBody() {\n    var encoded = new Buffer(this.body).toString('base64'),\n        len = encoded.length,\n        size = 100,\n        start = 0,\n        ret = '',\n        chunk;\n\n    while (chunk = encoded.substring(start, start + size > len ? len : start + size)) {\n      ret += chunk + '\\n';\n      start += size;\n    }\n\n    return ret;\n  },\n\n  valid: function (callback) {\n    if (!requiredFieldsExist(this, callback)) return false;\n    if (!fieldsAreClean(this, callback)) return false;\n    var validatedHeaders = ['to', 'from', 'cc', 'bcc', 'replyTo'],\n        len = validatedHeaders.length,\n        self = this,\n        addresses,\n        addLen,\n        key;\n\n    while (len--) {\n      key = validatedHeaders[len];\n\n      if (self[key]) {\n        addresses = toArray(self[key]);\n        addLen = addresses.length;\n\n        while (addLen--) {\n          if (!isValidAddress(addresses[addLen])) {\n            return error(\"invalid email address : \" + addresses[addLen], callback);\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n};\n/**\n * Email message constructor.\n *\n * @return {Msg}\n */\n\nfunction Msg() {\n  this.lines = [];\n}\n\nMsg.prototype = {\n  line: function (text) {\n    this.lines.push(text || '');\n  },\n  toString: function () {\n    return this.lines.join('\\n').replace(/\"/g, '\\\\\"');\n  }\n};\n/**\n * Validation helpers.\n */\n\nvar cleanHeaders = ['to', 'from', 'cc', 'bcc', 'replyTo', 'subject'],\n    injectionrgx = new RegExp(cleanHeaders.join(':|') + ':|content\\-type:', 'i');\n/**\n * Determines if any email headers contain vulnerabilities.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\nfunction fieldsAreClean(email, callback) {\n  var len = cleanHeaders.length,\n      header,\n      vlen,\n      vals,\n      val;\n\n  while (len--) {\n    header = cleanHeaders[len];\n\n    if (!email[header]) {\n      continue;\n    }\n\n    vals = toArray(email[header]);\n    vlen = vals.length;\n\n    while (vlen--) {\n      val = vals[vlen];\n\n      if (val) {\n        if (injectionrgx.test(val) || ~val.indexOf(\"%0a\") || ~val.indexOf(\"%0d\")) {\n          return error(\"Header injection detected in [\" + header + \"]\", callback);\n        }\n\n        vals[vlen] = val.replace(/\\n|\\r/ig, '');\n      }\n    }\n\n    email[header] = 2 > vals.length ? vals[0] : vals;\n  }\n\n  return true;\n}\n/**\n * Determines if all required email fields exist.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\n\nfunction requiredFieldsExist(email, callback) {\n  if (!email.from && !exports.from) {\n    return error('from is required', callback);\n  }\n\n  if (!email.to) {\n    return error('to is required', callback);\n  }\n\n  if (!email.subject) {\n    return error('subject is required', callback);\n  }\n\n  return true;\n}\n/**\n * Error helper that throws if no callback is passed. Else\n * executes the callback passing the err as the first argument.\n *\n * @param {String} msg\n * @param {Function} callback\n * @return {Bool|undefined}\n */\n\n\nfunction error(msg, callback) {\n  var err = new Error('node-email error: ' + msg);\n\n  if (callback) {\n    callback(err);\n    return false;\n  }\n\n  throw err;\n}\n/**\n * Formats an array of addresses as a string.\n *\n * @param {Array|String} what\n * @return {String}\n */\n\n\nfunction formatAddress(what) {\n  return Array.isArray(what) ? what.join(', ') : what;\n}\n/**\n * Converts `what` to an array.\n *\n * @param {Mixed} what\n * @return {Array}\n */\n\n\nfunction toArray(what) {\n  return Array.isArray(what) ? what : [what];\n}\n/**\n * Email validation regexps.\n * @see http://fightingforalostcause.net/misc/2006/compare-email-regex.php\n */\n\n\nvar emailrgx = /^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-zрф]{2,6})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i;\nvar capturergx = /<([^>].*)>$/;\n/**\n * Determines if `rawAddress` is a valid email address.\n *\n * @param {String} rawAddress\n * @return {Bool}\n */\n\nfunction isValidAddress(rawAddress) {\n  // john smith <email@domain.com> | email@domain.com\n  var address = capturergx.exec(rawAddress);\n  return address && address[1] ? emailrgx.test(address[1]) : emailrgx.test(rawAddress);\n}\n/**\n * Exports.\n */\n\n\nexports.Email = Email;\nexports.version = '0.2.4';\nexports.from = undefined;\nexports.timeout = 3000;\nexports.isValidAddress = isValidAddress;","map":{"version":3,"sources":["C:/Users/rehan/Desktop/netlify-cms-react-app-master/node_modules/email/index.js"],"names":["spawn","require","boundryidx","genBoundry","Date","now","Email","config","forEach","key","path","prototype","send","callback","valid","sendmail","options","on","code","err","Error","stdin","end","msg","timeout","exports","Msg","boundry","to","formatAddress","cc","bcc","html","bodyType","toLowerCase","plaintext","body","altText","line","from","replyTo","subject","encodedBody","toString","encoded","Buffer","len","length","size","start","ret","chunk","substring","requiredFieldsExist","fieldsAreClean","validatedHeaders","self","addresses","addLen","toArray","isValidAddress","error","lines","text","push","join","replace","cleanHeaders","injectionrgx","RegExp","email","header","vlen","vals","val","test","indexOf","what","Array","isArray","emailrgx","capturergx","rawAddress","address","exec","version","undefined"],"mappings":"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","sourcesContent":["\n// - node-email Copyright Aaron Heckmann <aaron.heckmann+github@gmail.com> (MIT Licensed)\n\n/**\n * Module dependencies.\n */\n\nvar spawn = require('child_process').spawn;\n\n/**\n * Generates a boundry string.\n * @return {String}\n */\n\nvar boundryidx = 0;\nfunction genBoundry () {\n  return 'part_' + Date.now() + \"_\" + boundryidx++;\n}\n\n/**\n * Email : Sends email using the sendmail command.\n *\n * Note: sendmail must be installed: see http://www.sendmail.org/\n *\n * @param {Object} config - optional configuration object\n *    - to {array|string} Email address(es) to which this msg will be sent\n *    - from {string} Email address from which this msg is sent. If not set\n *      defaults to the `exports.from` global setting.\n *    - replyTo {string} Email address to which replies will be sent. If not\n *      set defaults to `from`\n *    - cc {array|string} Email address(es) who receive a copy\n *    - bcc {array|string} Email address(es) who receive a blind copy\n *    - subject {string} The subject of the email\n *    - body {string} The message of the email\n *    - bodyType {string} Content type of body. Only valid option is\n *      'html' (for now). Defaults to text/plain.\n *    - altText {string} If `bodyType` is set to 'html', this will be sent\n *      as the alternative text.\n *    - timeout {number} Duration in milliseconds to wait before killing the\n *      process. If not set, defaults to `exports.timeout` global setting.\n *    - path {string} Optional path to the sendmail executable.\n *\n * Global settings\n *    - exports.timeout {number} Duration in milliseconds to wait before\n *      killing the process. Defaults to 3000. Used when `timeout` is not set\n *      on a message.\n *    - exports.from {string} Email address from which messages are sent. Used\n *      when `from` was not set on a message.\n *\n * Example:\n *    var Email = require('path/to/email').Email\n *    var myMsg = new Email(\n *    { from: 'me@example.com'\n *    , to:   'you@example.com'\n *    , subject: 'Knock knock...'\n *    , body: \"Who's there?\"\n *    })\n *    myMsg.send(function(err){\n *      ...\n *    })\n */\n\nfunction Email (config) {\n  config = config || {};\n\n  ; ['to'\n    ,'from'\n    ,'cc'\n    ,'bcc'\n    ,'replyTo'\n    ,'subject'\n    ,'body'\n    ,'bodyType'\n    ,'altText'\n    ,'timeout' ].forEach(function (key) {\n    this[key] = config[key];\n  }, this);\n\n  this.path = config.path || \"sendmail\";\n}\n\n\nEmail.prototype = {\n\n  send: function (callback) {\n    if (!this.valid(callback)) return;\n    var sendmail = spawn(this.path, ['-i', '-t'], this.options);\n    sendmail.on('exit', function(code) {\n      var err = null;\n      if (code !== 0) {\n        err = new Error(\"Sendmail exited with code: \" + code);\n      }\n\n      if (callback) {\n        callback(err);\n      }\n    });\n\n    sendmail.stdin.end(this.msg);\n  }\n\n, get options () {\n    return { timeout: this.timeout || exports.timeout };\n  }\n\n, get msg () {\n    var msg = new Msg()\n      , boundry = genBoundry()\n      , to = formatAddress(this.to)\n      , cc = formatAddress(this.cc)\n      , bcc = formatAddress(this.bcc)\n      , html = this.bodyType && 'html' === this.bodyType.toLowerCase()\n      , plaintext = !html ? this.body\n          : this.altText  ? this.altText\n          : '';\n\n    msg.line('To: ' + to);\n    msg.line('From: '+ (this.from || exports.from));\n    msg.line('Reply-To: ' + (this.replyTo || this.from || exports.from));\n    msg.line('Subject: '+ this.subject);\n\n    if (cc) msg.line('CC: ' + cc);\n\n    if (bcc) msg.line('BCC: ' + bcc);\n\n    msg.line('Mime-Version: 1.0');\n    msg.line('Content-Type: multipart/alternative; boundary=' + boundry);\n    msg.line();\n\n    if (plaintext) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/plain; charset=utf-8');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(plaintext);\n      msg.line();\n    }\n\n    if (html) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/html; charset=utf-8');\n      msg.line('Content-Transfer-Encoding: Base64');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(this.encodedBody);\n      msg.line();\n    }\n\n    return msg.toString();\n  }\n\n, get encodedBody () {\n    var encoded = (new Buffer(this.body)).toString('base64')\n      , len = encoded.length\n      , size = 100\n      , start = 0\n      , ret = ''\n      , chunk;\n\n    while (chunk = encoded.substring(start, start + size > len ? len : start + size)) {\n      ret += chunk + '\\n';\n      start += size;\n    }\n\n    return ret;\n  }\n\n, valid: function (callback) {\n    if (!requiredFieldsExist(this, callback)) return false;\n    if (!fieldsAreClean(this, callback)) return false;\n\n    var validatedHeaders = ['to','from','cc','bcc','replyTo']\n      , len = validatedHeaders.length\n      , self = this\n      , addresses\n      , addLen\n      , key;\n\n    while (len--) {\n      key = validatedHeaders[len];\n      if (self[key]) {\n        addresses = toArray(self[key]);\n        addLen = addresses.length;\n        while (addLen--) {\n          if (!isValidAddress(addresses[addLen])) {\n            return error(\"invalid email address : \" + addresses[addLen], callback);\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\n\n/**\n * Email message constructor.\n *\n * @return {Msg}\n */\n\nfunction Msg () {\n  this.lines = [];\n}\n\nMsg.prototype = {\n\n  line: function (text) {\n    this.lines.push(text || '');\n  }\n\n, toString: function () {\n    return this.lines.join('\\n').replace(/\"/g, '\\\\\"');\n  }\n}\n\n/**\n * Validation helpers.\n */\n\nvar cleanHeaders = ['to','from','cc','bcc','replyTo','subject']\n  , injectionrgx = new RegExp(cleanHeaders.join(':|') + ':|content\\-type:', 'i');\n\n/**\n * Determines if any email headers contain vulnerabilities.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\nfunction fieldsAreClean (email, callback) {\n  var len = cleanHeaders.length\n    , header\n    , vlen\n    , vals\n    , val;\n\n  while (len--) {\n    header = cleanHeaders[len];\n\n    if (!email[header]) {\n      continue;\n    }\n\n    vals = toArray(email[header]);\n    vlen = vals.length;\n\n    while (vlen--) {\n      val = vals[vlen];\n      if (val) {\n        if (injectionrgx.test(val) || ~val.indexOf(\"%0a\") || ~val.indexOf(\"%0d\")) {\n          return error(\"Header injection detected in [\" + header + \"]\", callback);\n        }\n        vals[vlen] = val.replace(/\\n|\\r/ig, '');\n      }\n    }\n\n    email[header] = 2 > vals.length\n      ? vals[0]\n      : vals;\n  }\n\n  return true;\n}\n\n/**\n * Determines if all required email fields exist.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\nfunction requiredFieldsExist (email, callback) {\n  if (!email.from && !exports.from) {\n    return error('from is required', callback);\n  }\n\n  if (!email.to) {\n    return error('to is required', callback);\n  }\n\n  if (!email.subject) {\n    return error('subject is required', callback);\n  }\n\n  return true;\n}\n\n/**\n * Error helper that throws if no callback is passed. Else\n * executes the callback passing the err as the first argument.\n *\n * @param {String} msg\n * @param {Function} callback\n * @return {Bool|undefined}\n */\n\nfunction error (msg, callback) {\n  var err = new Error('node-email error: ' + msg);\n\n  if (callback) {\n    callback(err);\n    return false;\n  }\n\n  throw err;\n}\n\n/**\n * Formats an array of addresses as a string.\n *\n * @param {Array|String} what\n * @return {String}\n */\n\nfunction formatAddress (what) {\n  return Array.isArray(what)\n    ? what.join(', ')\n    : what;\n}\n\n/**\n * Converts `what` to an array.\n *\n * @param {Mixed} what\n * @return {Array}\n */\n\nfunction toArray (what) {\n  return Array.isArray(what)\n    ? what\n    : [what];\n}\n\n/**\n * Email validation regexps.\n * @see http://fightingforalostcause.net/misc/2006/compare-email-regex.php\n */\n\nvar emailrgx = /^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-zрф]{2,6})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i;\n\nvar capturergx = /<([^>].*)>$/;\n\n/**\n * Determines if `rawAddress` is a valid email address.\n *\n * @param {String} rawAddress\n * @return {Bool}\n */\n\nfunction isValidAddress (rawAddress) {\n  // john smith <email@domain.com> | email@domain.com\n  var address = capturergx.exec(rawAddress);\n  return address && address[1]\n    ? emailrgx.test(address[1])\n    : emailrgx.test(rawAddress);\n}\n\n/**\n * Exports.\n */\n\nexports.Email = Email;\nexports.version = '0.2.4';\nexports.from = undefined;\nexports.timeout = 3000;\nexports.isValidAddress = isValidAddress;\n"]},"metadata":{},"sourceType":"script"}